/**
 * Generated by Elin Hjelmestam 2021-03-04
 *
 * This code was written as part of examination of KTH course IK1203
 */

import java.net.*;
import java.io.*;
import java.nio.charset.StandardCharsets;

public class HTTPAsk {

    private static int BUFFERSIZE = 1024;

    public static void main( String[] args) throws IOException {

        //set up:a stuff
        int portNumber = Integer.parseInt(args[0]);
        ServerSocket serverSocket = new ServerSocket(portNumber);

        //responses
        String HTTPHeader = "HTTP/1.1 200 OK\r\n\r\n";
        String badReq = "HTTP/1.1 400 Bad Request\r\n\r\n";
        String notFound = "HTTP/1.1 404 Not Found\r\n\r\n";

        //lista på bra saker att ha
        String host;
        String toServer;
        int port;
        String serverResponse;
        int GET;

        while(true){
            Socket clientSocket = serverSocket.accept();
            clientSocket.setSoTimeout(3000);

            StringBuilder build = new StringBuilder();
            byte[] input = new byte[BUFFERSIZE];

            //en fräsch start va
            host = null;
            toServer = null;
            port = 0;

            GET = clientSocket.getInputStream().read(input);        //GET int för att kunna läsa block

            try{
                while(GET >= 0){
                    String message = new String(input, 0, GET, StandardCharsets.UTF_8);
                    build.append(message);
                    GET = clientSocket.getInputStream().read(input);
                }
            }catch(IOException e){}     //skriv ut nåt fint litet meddelande kanske

            String read = build.toString();
            String[] reader = read.split("[?\\&\\=\\ ]");

            //gå igenom
            for (int a = 0; a < reader.length; a++) {
                if (reader[a].equals("hostname")) {
                    host = reader[++a];
                } else if (reader[a].equals("port")) {
                    port = Integer.parseInt(reader[++a]);
                } else if (reader[a].equals("string")) {
                    toServer = reader[++a];
                }
            }

            if(reader[1].equals("/ask") && host != null && port != 0) {
                if(toServer != null) {
                    try {
                        serverResponse = TCPClient.askServer(host, port, toServer);
                        byte[] output = (HTTPHeader + serverResponse).getBytes(StandardCharsets.UTF_8);
                        clientSocket.getOutputStream().write(output);
                    } catch (IOException e) {
                        byte[] output = badReq.getBytes(StandardCharsets.UTF_8);
                        clientSocket.getOutputStream().write(output);
                    }
                }
                else {
                    try {
                        serverResponse = TCPClient.askServer(host, port);
                        byte[] output = (HTTPHeader + serverResponse).getBytes(StandardCharsets.UTF_8);
                        clientSocket.getOutputStream().write(output);
                    } catch (IOException e) {
                        byte[] output = badReq.getBytes(StandardCharsets.UTF_8);
                        clientSocket.getOutputStream().write(output);
                    }
                }
            }
            else{
                byte[] output = notFound.getBytes(StandardCharsets.UTF_8);
                clientSocket.getOutputStream().write(output);
            }

            clientSocket.close();
        }
    }
}

